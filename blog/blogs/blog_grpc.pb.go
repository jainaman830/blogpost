// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0--rc1
// source: blog.proto

package blogs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BlogPost_CreatePost_FullMethodName   = "/blog.BlogPost/CreatePost"
	BlogPost_ReadPost_FullMethodName     = "/blog.BlogPost/ReadPost"
	BlogPost_ReadAllPosts_FullMethodName = "/blog.BlogPost/ReadAllPosts"
	BlogPost_UpdatePost_FullMethodName   = "/blog.BlogPost/UpdatePost"
	BlogPost_DeletePost_FullMethodName   = "/blog.BlogPost/DeletePost"
)

// BlogPostClient is the client API for BlogPost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogPostClient interface {
	CreatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Post, error)
	ReadPost(ctx context.Context, in *ReadPostRequest, opts ...grpc.CallOption) (*Post, error)
	ReadAllPosts(ctx context.Context, in *ReadAllPost, opts ...grpc.CallOption) (*AllPosts, error)
	UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*Post, error)
	DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostResponse, error)
}

type blogPostClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogPostClient(cc grpc.ClientConnInterface) BlogPostClient {
	return &blogPostClient{cc}
}

func (c *blogPostClient) CreatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, BlogPost_CreatePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogPostClient) ReadPost(ctx context.Context, in *ReadPostRequest, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, BlogPost_ReadPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogPostClient) ReadAllPosts(ctx context.Context, in *ReadAllPost, opts ...grpc.CallOption) (*AllPosts, error) {
	out := new(AllPosts)
	err := c.cc.Invoke(ctx, BlogPost_ReadAllPosts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogPostClient) UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, BlogPost_UpdatePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogPostClient) DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostResponse, error) {
	out := new(DeletePostResponse)
	err := c.cc.Invoke(ctx, BlogPost_DeletePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogPostServer is the server API for BlogPost service.
// All implementations must embed UnimplementedBlogPostServer
// for forward compatibility
type BlogPostServer interface {
	CreatePost(context.Context, *Post) (*Post, error)
	ReadPost(context.Context, *ReadPostRequest) (*Post, error)
	ReadAllPosts(context.Context, *ReadAllPost) (*AllPosts, error)
	UpdatePost(context.Context, *UpdatePostRequest) (*Post, error)
	DeletePost(context.Context, *DeletePostRequest) (*DeletePostResponse, error)
	mustEmbedUnimplementedBlogPostServer()
}

// UnimplementedBlogPostServer must be embedded to have forward compatible implementations.
type UnimplementedBlogPostServer struct {
}

func (UnimplementedBlogPostServer) CreatePost(context.Context, *Post) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedBlogPostServer) ReadPost(context.Context, *ReadPostRequest) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPost not implemented")
}
func (UnimplementedBlogPostServer) ReadAllPosts(context.Context, *ReadAllPost) (*AllPosts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllPosts not implemented")
}
func (UnimplementedBlogPostServer) UpdatePost(context.Context, *UpdatePostRequest) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedBlogPostServer) DeletePost(context.Context, *DeletePostRequest) (*DeletePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedBlogPostServer) mustEmbedUnimplementedBlogPostServer() {}

// UnsafeBlogPostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogPostServer will
// result in compilation errors.
type UnsafeBlogPostServer interface {
	mustEmbedUnimplementedBlogPostServer()
}

func RegisterBlogPostServer(s grpc.ServiceRegistrar, srv BlogPostServer) {
	s.RegisterService(&BlogPost_ServiceDesc, srv)
}

func _BlogPost_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogPostServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogPost_CreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogPostServer).CreatePost(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogPost_ReadPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogPostServer).ReadPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogPost_ReadPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogPostServer).ReadPost(ctx, req.(*ReadPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogPost_ReadAllPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogPostServer).ReadAllPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogPost_ReadAllPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogPostServer).ReadAllPosts(ctx, req.(*ReadAllPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogPost_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogPostServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogPost_UpdatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogPostServer).UpdatePost(ctx, req.(*UpdatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogPost_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogPostServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogPost_DeletePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogPostServer).DeletePost(ctx, req.(*DeletePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlogPost_ServiceDesc is the grpc.ServiceDesc for BlogPost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlogPost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.BlogPost",
	HandlerType: (*BlogPostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePost",
			Handler:    _BlogPost_CreatePost_Handler,
		},
		{
			MethodName: "ReadPost",
			Handler:    _BlogPost_ReadPost_Handler,
		},
		{
			MethodName: "ReadAllPosts",
			Handler:    _BlogPost_ReadAllPosts_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _BlogPost_UpdatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _BlogPost_DeletePost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}
